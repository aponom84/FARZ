{"name":"FARZ","tagline":"Benchmark Generator for Community Detection Validation","body":"# FARZ \r\n## Benchmarks for Community Detection Algorithms\r\n\r\nFARZ is generator/simulator for networks with built-in community structure. \r\nIt creates graphs/networks with community labels, which can be used for evaluating community detection algorithms.\r\n\r\n### Generator Parameters\r\n* main parameters\r\n   + `n`: number of nodes\r\n   + `m`: half the average degree of nodes\r\n   + `k`: number of communities\r\n* control parameters\r\n   + `beta`: the strength of community structure, i.e. the probability of edges to be formed within communities, default (0.8)\r\n   + `alpha`: the strength of common neighbor's effect on edge formation edges, default (0.5)\r\n   + `gamma`: the strength of degree similarity effect on edge formation, default (0.5), can be negative for networks with negative degree correlation\r\n* overlap parameters\r\n   + `r`: the number of communities each node can belong to, default (1)\r\n   + `q`: the probability of a node belonging to the multiple communities, default (0.5)\r\n* config parameters\r\n   + `phi`: the constant added to all community sizes, higher number makes the communities more balanced in size, default (1) which results in power law distribution for community sizes\r\n   + `epsilon`: the probability of noisy/random edges, default (0.0000001)\r\n   + `t`: the probability of also connecting to the neighbors of a node each nodes connects to. The default value is (0), but could be increase to a small number to achieve higher clustering coefficient. \r\n \r\n### How to run\r\nThe source code is in Pyhton 2.7. \r\nYou can generate FARZ benchmarks from FARZ.py in src. \r\nSee ` python FARZ.py -h ` to examine the usage and options; or try the following examples.\r\n\r\n### Examples\r\n* example 1: generate a network with 1000 nodes and about 5x1000 edges (m=5), with 4 communities, where 90% of edges fall within communities (beta=0.9)\r\n\r\n\t` python FARZ.py -n 1000 -m 5 -k 4 --beta 0.9`\r\n* example 2: generate a network with properties of example 1, where alpha = 0.2 and gamma = -0.8\r\n\r\n\t` python FARZ.py -n 1000 -m 5 -k 4 --beta 0.9 --alpha 0.2 --gamma -0.8 `\r\n* example 3: generate 10 sample networks with properties of example 1 and save them into ./data\r\n\r\n\t` python FARZ.py --path ./data -s 10 -n 1000 -m 5 -k 4 --beta 0.9`\r\n* example 4: repeat example 2, for beta that varies from 0.5 to 1 with 0.05 increments\r\n\r\n\t` python FARZ.py --path ./data -s 10 -v beta -c [0.5,1,0.05] -n 1000 -m 5 -k 4 `\r\n* example 5: generate overlapping communities, where each node belongs to at most 3 communities and the portion of overlapping nodes varies, overlapping communities are saved as a list format (a community per line)\r\n\r\n\t` python FARZ.py -r 3 -v q --path ./data -s 5 --format list`\r\n\r\n### Supplementary Materials  \r\n<https://github.com/rabbanyk/FARZ/blob/master/FARZ_Supplementary.pdf>\r\n\r\n### Support or Contact\r\nReihaneh Rabbany, rabbanyk@ualberta.ca\r\n","google":"UA-31924586-1","note":"Don't delete this file! It's used internally to help with page regeneration."}